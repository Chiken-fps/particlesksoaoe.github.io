<html><head><base href="." />
<style>
canvas {
    background: #091220;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    cursor: pointer;
}

body {
    margin: 0;
    overflow: hidden;
    background: #091220;
}

.controls {
    position: fixed;
    top: 10px;
    right: 10px;
    display: flex;
    flex-direction: column;
    gap: 10px;
    z-index: 1000;
}

#particleSlider {
    width: 150px;
    background: rgba(255, 255, 255, 0.2);
    padding: 10px;
    border-radius: 4px;
}

#particleSlider input {
    width: 100%;
}

#particleSlider label {
    color: white;
    font-family: Arial, sans-serif;
    display: block;
    margin-bottom: 5px;
}
</style>
</head>
<body>
<div class="controls">
    <div id="particleSlider">
        <label>Particles: <span id="particleCount">200</span></label>
        <input type="range" min="0" max="1000" value="200" id="particleNumber">
    </div>
</div>
<canvas id="canvas"></canvas>

<script>
const canvas = document.getElementById('canvas');
const ctx = canvas.getContext('2d');

const particleSlider = document.getElementById('particleNumber');
const particleCount = document.getElementById('particleCount');

function updateParticles() {
    const newCount = parseInt(particleSlider.value);
    particleCount.textContent = newCount;
    
    if (newCount > particles.length) {
        while (particles.length < newCount) {
            particles.push(new Particle(
                Math.random() * canvas.width,
                Math.random() * canvas.height
            ));
        }
    } else if (newCount < particles.length) {
        particles.length = newCount;
    }
}

particleSlider.addEventListener('input', updateParticles);

function resizeCanvas() {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
}
resizeCanvas();
window.addEventListener('resize', resizeCanvas);

let time = 0;
const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

class Particle {
    constructor(x, y, isAttractor = false) {
        this.x = x;
        this.y = y;
        this.vx = isAttractor ? 0 : (Math.random() - 0.5) * 5;
        this.vy = isAttractor ? 0 : (Math.random() - 0.5) * 5;
        this.isAttractor = isAttractor;
        this.trail = [];
        this.maxTrailLength = 5;
        this.initialX = x;
        this.initialY = y;
        this.forceMultiplier = 1;
        this.radiusMultiplier = 1;
    }

    update() {
        if (!this.isAttractor) {
            if (this.trail.length >= this.maxTrailLength) {
                this.trail.shift();
            }
            this.trail.push({x: this.x, y: this.y});

            const speed = Math.sqrt(this.vx * this.vx + this.vy * this.vy);
            if (speed > 5) {
                const scale = 5 / speed;
                this.vx *= scale;
                this.vy *= scale;
            }

            this.x += this.vx;
            this.y += this.vy;

            if (this.x < 0 || this.x > canvas.width) this.vx *= -1;
            if (this.y < 0 || this.y > canvas.height) this.vy *= -1;
            this.x = Math.max(0, Math.min(canvas.width, this.x));
            this.y = Math.max(0, Math.min(canvas.height, this.y));
        }
    }

    draw() {
        if (!this.isAttractor) {
            ctx.beginPath();
            ctx.strokeStyle = 'rgba(255, 255, 0, 0.2)';
            ctx.lineWidth = 2;
            if (this.trail.length > 1) {
                ctx.moveTo(this.trail[0].x, this.trail[0].y);
                for (let i = 1; i < this.trail.length; i++) {
                    ctx.lineTo(this.trail[i].x, this.trail[i].y);
                }
                ctx.stroke();
            }
        }

        ctx.beginPath();
        if (this.isAttractor) {
            ctx.shadowBlur = 20;
            ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';
            ctx.fillStyle = 'black';
            ctx.arc(this.x, this.y, 20, 0, Math.PI * 2);
        } else {
            ctx.shadowBlur = 15;
            ctx.shadowColor = 'rgba(255, 255, 0, 0.8)';
            ctx.fillStyle = 'yellow';
            ctx.arc(this.x, this.y, 4, 0, Math.PI * 2);
        }
        ctx.fill();
        ctx.shadowBlur = 0;
    }
}

const particles = [];
const attractors = [];

for (let i = 0; i < 200; i++) {
    particles.push(new Particle(
        Math.random() * canvas.width,
        Math.random() * canvas.height
    ));
}

window.addEventListener('keydown', (e) => {
    if (e.key.toLowerCase() === 'r') {
        attractors.length = 0;
    }
});

canvas.addEventListener('click', (e) => {
    const rect = canvas.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    
    let clicked = false;
    
    // Check if we clicked on an existing attractor
    attractors.forEach((attractor) => {
        const dx = attractor.x - x;
        const dy = attractor.y - y;
        const dist = Math.sqrt(dx * dx + dy * dy);
        
        if (dist < 40) {
            if (isMobile) {
                // Remove on mobile
                const index = attractors.indexOf(attractor);
                if (index > -1) attractors.splice(index, 1);
            } else {
                // Increase force and radius on desktop
                attractor.forceMultiplier *= 2;
                attractor.radiusMultiplier *= 1.2;
            }
            clicked = true;
        }
    });
    
    // If we didn't click on an existing attractor, create a new one
    if (!clicked) {
        attractors.push(new Particle(x, y, true));
    }
});

canvas.addEventListener('contextmenu', (e) => {
    e.preventDefault();
    const rect = canvas.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    
    let closestIndex = -1;
    let closestDist = Infinity;
    
    attractors.forEach((attractor, index) => {
        const dx = attractor.x - x;
        const dy = attractor.y - y;
        const dist = Math.sqrt(dx * dx + dy * dy);
        if (dist < closestDist) {
            closestDist = dist;
            closestIndex = index;
        }
    });
    
    if (closestIndex !== -1 && closestDist < 40) {
        attractors.splice(closestIndex, 1);
    }
});

function animate() {
    ctx.fillStyle = '#091220';
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    time += 1;

    for (let particle of particles) {
        for (let attractor of attractors) {
            const dx = attractor.x - particle.x;
            const dy = attractor.y - particle.y;
            const distance = Math.sqrt(dx * dx + dy * dy);
            
            const baseRadius = isMobile ? 500 : 300;
            const radius = baseRadius * attractor.radiusMultiplier;
            
            if (distance < radius) {
                const force = (5 * attractor.forceMultiplier) / (distance + 1);
                particle.vx += (dx / distance) * force;
                particle.vy += (dy / distance) * force;
            }
        }
        
        particle.update();
        particle.draw();
    }

    for (let attractor of attractors) {
        attractor.update();
        attractor.draw();
    }

    requestAnimationFrame(animate);
}

animate();
</script>
</body></html>
